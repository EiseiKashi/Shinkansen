package  {
	import flash.display.MovieClip;
	import flash.events.Event;
	import flash.events.KeyboardEvent;
<<<<<<< .mine
	import flash.events.MouseEvent;
	import flash.geom.Point;
=======
>>>>>>> .r5385

	public class Camera {
		public static var PI2:Number = Math.PI * 2;
		
		private var _cameraAsset:CameraAsset = new CameraAsset();
		private var _fixCamera:CameraAsset   = new CameraAsset();
		private var _render:Function;
		
		private var _itemsList:Array      = new Array();
		private var _map:MovieClip        = new MovieClip();
		private var _inverseMap:MovieClip = new MovieClip();
		private var _debugger:Debugger    = new Debugger();
		
		private var _depth:Number         = 0;
		private var _radian:Number        = 0;
		private var _focalLength:Number   = 300;
		private var _offsetX:Number       = 0;
		private var _offsetY:Number       = 0;
		private var _cameraX:Number       = 0;
		private var _cameraOffsetX:Number = 0;
		private var _cameraOffsetY:Number = 0;
		private var _cameraZ:Number       = 0;
		
		public function Camera() {
			_render      = render1;
			_inverseMap.addChild(new GridAsset());
			_inverseMap.addChild(_cameraAsset);
			focalLength = _focalLength;
			_map.addChild(new GridAsset());
			
		}
		
		public function addItem(item:Sprite3D):void {
			_itemsList.push(item);
			
			_itemsList.sortOn("z", Array.DESCENDING | Array.NUMERIC); 
			
			var point:PointAsset  = new PointAsset();
				point.name        = item.view.name;
				point.x           = item.x;
				point.y           = item.z;
				point.indexT.text = item.id;
				point.addEventListener(MouseEvent.ROLL_OVER, onViewRollOver);
			
			var fixPoint:PointAsset = new PointAsset();
				fixPoint.name     = "fix" + point.name;
				fixPoint.x        = item.x;
				fixPoint.y        = item.z;
				fixPoint.indexT.text = item.id;
				fixPoint.alpha    = 0.3;
			_map.addChild(point);
			_map.addChild(fixPoint);
			
			_render();
		}
		
		private function onViewRollOver(event:MouseEvent):void {
			_debugger.pointT.text = MovieClip(event.target).name;
		}
		
		public function get cameraX(): Number{
			return _cameraOffsetX;
		}
		
		public function set cameraX(value:Number):void {
			_cameraOffsetX = value;
			_render();
		}
		
		public function set radian(value:Number):void {
			_radian = value;
			updateComponent();
			_render();
		}
		
		public function set cameraZ(value:Number):void {
			if (isNaN(value)) {
				return;
			}
			_depth = value;
			updateComponent();
			_render();
		}
		
		public function get cameraZ():Number {
			return _depth;
		}
		
		public function get radian():Number {
			return _radian;
		}
		
		public function get map():MovieClip {
			return _map;
		}
		
		public function get focalLength():Number {
			return _focalLength;
		}
		
		public function set focalLength(value:Number):void {
			if (isNaN(value)) {
				return;
			}
			_focalLength = value;
			_cameraAsset.focal.height = _focalLength * 2;
			_cameraAsset.camera.y     = _cameraAsset.focal.height/2;
			_render();
		}
		
		public function get offsetX():Number {
			return _offsetX;
		}
		
		public function set offsetX(value:Number):void {
			_offsetX = value;
		}
		
		public function get offsetY():Number {
			return _offsetY;
		}
		
		public function set offsetY(value:Number):void {
			_offsetY = value;
		}
		
		public function get inverseMap():MovieClip {
			return _inverseMap;
		}
		
		public function get debugger():Debugger {
			return _debugger;
		}
		
		private function render1():void {
			var view:MovieClip;
			var dx:Number;
			var dy:Number;
			var x:Number;
			var y:Number;
			var z:Number;
			var itemRadian:Number;
			var radius:Number;
			var item:Sprite3D;
			var point:MovieClip;
			var scaleFactor:Number;
			var name:String
			var index:uint  = 0;
			var length:uint = _itemsList.length;
			_map.graphics.clear();
			while (index < length) {
				// Obtención del item
				item    = _itemsList[index];
				view    = item.view;
				name    = view.name;
				// Otención de punto en el mapa
				point   = MovieClip(_map.getChildByName(name));
				
<<<<<<< .mine
				drawLine(_map, new Point(_cameraX, _cameraZ), new Point(item.x, item.z), 0xFFFF00);
				
				dx      = item.x - _cameraX;
=======
				dx      = item.x - _cameraX + _cameraOffsetX;
>>>>>>> .r5385
				dy      = item.z - _cameraZ;
				
				itemRadian = Math.atan2(dy,dx) + _radian;
				radius     = Math.sqrt(dx*dx + dy*dy);
				
				x = item.x;
				y = item.y - _cameraOffsetY;
				z = Math.sin(itemRadian) * radius;
				
				point.x = x;
				point.y = z;
				
				item.cameraZ = z;
				scaleFactor  = _focalLength / (_focalLength + z);
				
				if(scaleFactor > 0) {
					view.visible = true;
					view.x       = (x * scaleFactor) + _offsetX;
					view.y       = (y * scaleFactor) + _offsetY;
					view.scaleX  = scaleFactor;
					view.scaleY  = scaleFactor;
<<<<<<< .mine
=======
				}else {
					view.visible = false;
				}
				
				index++
			}
			
			_itemsList.sortOn("cameraZ", Array.DESCENDING | Array.NUMERIC);
			
			index  = 0;
			length = _itemsList.length; 
			while (index < length) {
				item    = _itemsList[index];
				view    = item.view;
				view.parent.setChildIndex(view, index);
				index++
			}
			
			displayMap();
		}
		
		private function render1():void {
			var view:MovieClip;
			var dx:Number;
			var dy:Number;
			var x:Number;
			var y:Number;
			var z:Number;
			var itemRadian:Number;
			var radius:Number;
			var item:Sprite3D;
			var point:MovieClip;
			var scaleFactor:Number;
			var name:String
			var index:uint  = 0;
			var length:uint = _itemsList.length;
			while (index < length) {
				item    = _itemsList[index];
				view    = item.view;
				name    = "id_" + String(index);
				point   = MovieClip(_map.getChildByName(name));
				
				dx      = item.x - _cameraX;
				dy      = item.z - _cameraZ;
				
				itemRadian = Math.atan2(dy,dx) + _radian;
				radius     = Math.sqrt(dx*dx + dy*dy);
				
				x = Math.cos(itemRadian) * radius + _cameraOffsetX;
				y = item.y - _cameraOffsetY;
				z = Math.sin(itemRadian) * radius;
				
				point.x = x;
				point.y = z;
				
				item.cameraZ = z;
				scaleFactor  = _focalLength / (_focalLength + z);
				
				if(scaleFactor > 0) {
					view.visible = true;
					view.x       = (x * scaleFactor) + _offsetX;
					view.y       = (y * scaleFactor) + _offsetY;
					view.scaleX  = scaleFactor;
					view.scaleY  = scaleFactor;
>>>>>>> .r5385
					view["foreground"].alpha   = scaleFactor;
					view["scaleT"].text  = String(int(scaleFactor*100));
				}else {
					view.visible = false;
				}
				
				index++
			}
			
			_itemsList.sortOn("cameraZ", Array.DESCENDING | Array.NUMERIC);
			
			index  = 0;
			length = _itemsList.length; 
			while (index < length) {
				item    = _itemsList[index];
				view    = item.view;
				view.parent.setChildIndex(view, index);
				index++
			}
			
			displayMap();
		}
		
		private function displayMap():void {
			_inverseMap.graphics.clear();
			_inverseMap.graphics.lineStyle(1, 0x00FF00);
			_inverseMap.graphics.moveTo(0, 0);
			_inverseMap.graphics.lineTo(0, 0);
			_inverseMap.graphics.lineTo(_cameraX, _cameraZ);
			
			_inverseMap.graphics.lineStyle(1, 0x0000FF);
			var item:Sprite3D;
			var index:uint  = 0;
			var length:uint = 0;
			while (index < length) {
				item = _itemsList[index];
				_inverseMap.graphics.moveTo(_cameraX, _cameraZ);
				_inverseMap.graphics.lineTo(_cameraX, _cameraZ);
				_inverseMap.graphics.lineTo(item.x, item.y);
				index++;
			}
			
			_cameraAsset.rotation = getAngle(radian);
			_cameraAsset.x        = _cameraX;
			_cameraAsset.y        = _cameraZ;
			
			_debugger.xT.text    = String(_cameraX);
			_debugger.yT.text    = String("---");
			_debugger.zT.text    = String(_cameraZ);
			
			_debugger.offXT.text = String(_cameraOffsetX);
			_debugger.offYT.text = String(_cameraOffsetY);
			_debugger.offZT.text = "---";
			
			_map.addChild(_fixCamera);
			_fixCamera.x = _cameraX;
			_fixCamera.y = _cameraZ;
			
		}
		
		private function updateComponent():void {
			_cameraX  = Math.sin(_radian) * (_depth);
			_cameraZ  = Math.cos(_radian) * (_depth);
		}
		
		private function getHipotenuse(dx:Number, dy:Number):Number {
			var hypotenuse:Number =  Math.sqrt(dx * dx + dy * dy);
			return hypotenuse;
		}
		
		private function getRadian (degree:Number):Number{
			return degree * (PI2/360);
		}
		
		public function getAngle(radian:Number):Number {
			return radian * (360/PI2);
		}
		
<<<<<<< .mine
		private function drawLine(mc:MovieClip, origin:Point, destiny:Point, color:Number, clear:Boolean=false):void {
			var graphics:Graphics = mc.graphics;
			if (clear) {
				graphics.clear();
			}
			graphics.lineStyle(1, color);
			graphics.moveTo(origin.x, origin.y);
			graphics.lineTo(origin.x, origin.y);
			graphics.lineTo(destiny.x, destiny.y)
		}
=======
>>>>>>> .r5385
	}
}